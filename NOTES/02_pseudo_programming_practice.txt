tilt-shift image splash screen
    http://www.youtube.com/watch?v=LSmgKRx5pBo

(to write a great program) start with comments
    1. code will be well-organized
    2. once you start, the question "What next?" is already answered
    3. comments (which should always express intent) will communicate
        your intent to the next programmer (which might be you!)

        (comments are taken out by the compiler)


http://www.jw34.net/fbp/parkmap.html

2 teams
    both: create a list of instructions for traversing the park
    1: be as long winded as possible
    2: be as terse as possible
    
    race! who will win?

    now, let's take the shorter list of instructions and see how short we can make it!
    shorter! (assume a robot is going to follow the instructions
    
    )
    shorter! (until we substitue numbers for words with a key)

    but... take away the key. 
        can we pass these instructions on to anyone?
        will they still have meaning for humans?

    open source vs closed source
    why interpreted languages are inherently open source


interpreted: 1
    parse instructions up
    ** sometimes: translate instructions into commands (byte code or machine code)
    follow instructions

compiled: 2
    compile
        parse instructions up
        translate instructions into simple commands 
            (byte code or machine code)
        compress them
        store the compressed commands
    run
        execute stored commands

so, why are compiled languages faster?

decomposition into functions, classes
    laundry example

object-oriented programming

interpreted languages
html
javascript
ruby

why start with ruby?
    object-oriented
        which javascript really, really wants to be...
        it's natural, and gives you a powerful approach


http://www.codecademy.com/tracks/ruby
