----------------------------------------------------------------------
00 - why learn programming?
01 - what is programming?
  computers are dumb and people are smart
  programming: sharing your smarts with the computer
  programming: getting the computer to do something useful

02 - pseudo programming
  pseudocode: just program like you say it
  comments: a great pseudocode way to start
  comments: for people, computer ignores them
  compiled vs interpreted
  we will be learning with interpreted languages:
      javascript
      ruby
      html
      css

03 - flow control
  making decisions: the heart of programming

======================================================================
[ review back to here ]
======================================================================
04 - flow control
  conditional operators
  = (assignment) != (is not the same as) == (comparision)

05 - flow control revisited
  codecademy begins!

06 - git version control
07 - git and essential command line commands
    
======================================================================
[ next lesson starts here ]
======================================================================
08 - booleans

2) objects
  classes are blueprints
  creating objects

  class User
  end


======================================================================

single ' vs "
why doesn't this work?
    print 'Adios, #{my_string}!'

string interpolation
    print "Adios, #{my_string}!"

then why use '?


our first website
    github
    heroku

counting like a computer
    base 10
    base 2
    base 16

----------------------------------------------------------------------

short-circuiting || when first arg true
    explain short-circuiting && when first arg false
    examples:  
        happy = true || sunshine == true
        second part never evaluated

regular expressions basics
    .gsub! /s/ 'th'

sorting algorythms
user stories
TDD
agile programming
when (not) to optimize?
loose coupling
dependency injection


>> explain short-circuiting || when first arg true
>> explain short-circuiting && when first arg false
>> examples:  
    happy = true || sunshine == true
    >> second part never evaluated

----------------------------------------------------------------------
